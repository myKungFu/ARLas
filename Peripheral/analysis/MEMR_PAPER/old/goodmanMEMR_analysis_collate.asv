function [] = goodmanMEMR_analysis_collate()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    fileNameL = 'Ch3_ER10xA_memr_0001.mat';
    fileNameR = 'Ch4_ER10xB_memr_0001.mat';
    
    basePath = 'C:\myWork\ARLas\Data\MEMR_goodmanTest\';
    dSubj = dir(basePath);
    nSubj = size(dSubj,1);
try    
    for ii=3:nSubj
        disp(['Analyzing subject ',num2str(ii-2),' of ',num2str(nSubj-2)])
        dRuns = dir([basePath,dSubj(ii).name]);
        nRuns = size(dRuns,1);
        for jj=3:nRuns
            disp(['  Analyzing run ',num2str(jj-2),' of ',num2str(nRuns-2)])
            subjectName = [dSubj(ii).name,'\'];
            runName = [dRuns(jj).name,'\'];
            pathName = [basePath,subjectName,runName];

            load([pathName,'MEMRanalysis.mat'])

            TA(jj-2,1) = MEMR.totalActivation;
            THD(jj-2,1) = sum(MEMR.thdUp_lvl.*(MEMR.present.*MEMR.snr))/sum(MEMR.present.*MEMR.snr); %MEMR.thdUpEstimate;
                q = sum(MEMR.peakAmp .* (MEMR.present.*MEMR.snr)) / sum(MEMR.present.*MEMR.snr);
            PEAK(jj-2,1) = 20*log10(q);
%            PEAK(jj-2,1) = max(max(MEMR.CAL,[],1)'.*MEMR.present);
%             if PEAK(jj-2,1) > 20
%                 keyboard
%             end
        end
        if median(THD) < 45
            keyboard
        end
        peak(ii-2,:) = PEAK;
        pBar(ii-2,1) =  median(PEAK);
        pStd(ii-2,1) = std(PEAK);
        ta(ii-2,:) = TA';
        taBar(ii-2,1) = median(TA);
        taStd(ii-2,1) = std(TA);
        thd(ii-2,:) = THD';
        thdBar(ii-2,1) = median(THD);
        thdStd(ii-2,1) = std(THD);
        subjNumber(ii-2,1) = str2double(subjectName(4:5));
    end
catch ME
    keyboard
end

X = [subjNumber,taBar,taStd,thdBar,thdStd,pBar,pStd];
remove = [1,2,4,13]; % remove these indices, because don't have corresponding speech scores
X(remove,:) = [];

taBar = X(:,2);
taStd = X(:,3);
thdBar = X(:,4);
thdStd = X(:,5);
pBar = X(:,6);
pStd = X(:,7);

speechScore = [21.5
23
25
17
21
26.5
20
18
20.5
21.5
20.5
22.5
25.5
13
16
19
17
13.5
18
14.5
18.5
24.5
16
21.5
16
19
20
18.5
19.5
21.5];

figure % histogram of results ---------------------------------------------
subplot(1,2,1)
boxplot(thdBar)
ylabel('(dB SPL)','FontSize',12)
xlabel('Threshold','FontSize',12)
set(gca,'XTickLabel','')
set(gca,'XTick','')
grid on
subplot(1,2,2)
boxplot(20*log10(pBar))
xlabel('Peak Activation','FontSize',12)
ylabel('dB','FontSize',12)
set(gca,'XTickLabel','')
grid on

% plot regressions --------------------------------------------------------
figure % plot threshold and speech score
subplot(1,2,1)
hold on
N = length(taBar); % plot peak level and speech score
for ii=1:N
    plot(thdBar(ii,:),speechScore(ii,:),'ob','MarkerSize',(log(thdStd(ii))+3)*2.5,'LineWidth',1)
end
xlabel('MEMR Threshold (dB SPL)','FontSize',12)
ylabel('Speech Score','FontSize',12)
xlim([60 115])
% from the curve-fitting toolbox:
% Linear model Poly1:
%      f(x) = p1*x + p2
% Coefficients (with 95% confidence bounds):
%        p1 =     -0.1675  (-0.3219, -0.01309)
%        p2 =       34.53  (21.08, 47.98)
% 
% Goodness of fit:
%   SSE: 1447
%   R-square: 0.07389
%   Adjusted R-square: 0.04081
%   RMSE: 7.189
% regression ------
%  mdl = fitlm(X,y,'RobustOpts','on')
% mdl = 
% Linear regression model (robust fit):
%     y ~ 1 + x1
% 
% Estimated Coefficients:
%                    Estimate      SE        tStat       pValue  
%                    ________    _______    _______    __________
%     (Intercept)      33.302     6.6167      5.033    2.5339e-05
%     x1             -0.15559    0.07632    -2.0387      0.051026
% 
% Number of observations: 30, Error degrees of freedom: 28
% Root Mean Squared Error: 3.37
% R-squared: 0.134,  Adjusted R-Squared: 0.103
% F-statistic vs. constant model: 4.33, p-value = 0.0468
% 
p1 = -0.1675;
p2 = 34.53;
xxx = (60:1:115)';
yyy = p1.*xxx + p2;
plot(xxx,yyy,'k-')

subplot(1,2,2)
hold on
for ii=1:N
    plot(pBar(ii,:),speechScore(ii,:),'or','MarkerSize',(log(pStd(ii))+3)*4,'LineWidth',1)
end
xlabel('MEMR Peak (dB)','FontSize',12)
ylabel('Speech Score','FontSize',12)
% curve-fitting toolbox --------
% Linear model Poly1:
%      f(x) = p1*x + p2
% Coefficients (with 95% confidence bounds):
%        p1 =      -1.014  (-1.861, -0.1661)
%        p2 =        31.9  (21.34, 42.46)
% 
% Goodness of fit:
%   SSE: 738.5
%   R-square: 0.1225
%   Adjusted R-square: 0.09115
%   RMSE: 5.136
%
p1 = -1.014;
p2 = 31.9;
xxx = (8:1:16)';
yyy = p1.*xxx + p2;
plot(xxx,yyy,'k-')
%-------------
%X = [pBar];
%mdl = fitlm(X,y)
% mdl = fitlm(X,y,'RobustOpts','on')
% mdl = 
% Linear regression model (robust fit):
%     y ~ 1 + x1
% 
% Estimated Coefficients:
%                    Estimate      SE       tStat       pValue  
%                    ________    ______    _______    __________
%     (Intercept)     32.227     5.4191     5.9468    2.1119e-06
%     x1             -1.0356     0.4406    -2.3503      0.026034
% 
% Number of observations: 30, Error degrees of freedom: 28
% Root Mean Squared Error: 3.38
% R-squared: 0.165,  Adjusted R-Squared: 0.135
% F-statistic vs. constant model: 5.53, p-value = 0.026



thdWeights = log(thdStd)+3;
pWeights = log(pStd)+3;
%save('memSpeech','pBar','thdBar','speechScore','pWeights','thdWeights')

keyboard

figure
subplot(1,2,1)
histogram(thdBar,8)
xlabel('Threshold (dB SPL)','FontSize',12)
ylabel('Count','FontSize',12)
subplot(1,2,2)
histogram(20*log10(pBar),8)
xlabel('Peak Activation (dB)','FontSize',12)
ylabel('Count','FontSize',12)



N = length(taBar);
figure; hold on
for ii=1:N
    plot(taBar(ii,:),speechScore(ii,:),'o','MarkerSize',(1./taStd(ii))*25,'LineWidth',1)
    %line([ta(ii),ta(ii)],[thd(ii)-thdStd(ii),thd(ii)+thdStd(ii)])
    %line([ta(ii)-taStd(ii),ta(ii)+taStd(ii)],[thd(ii),thd(ii)])
end
xlabel('Total Activation','FontSize',12)
ylabel('Speech Score','FontSize',12)


figure; hold on
for ii=1:N
    plot(thdBar(ii,:),speechScore(ii,:),'o','MarkerSize',(1./thdStd(ii))*25,'LineWidth',1)
end
xlabel('MEMR Threshold','FontSize',12)
ylabel('Speech Score','FontSize',12)

figure; hold on
for ii=1:N
    plot(pBar(ii,:),speechScore(ii,:),'o','MarkerSize',14,'LineWidth',1)
end
xlabel('MEMR Peak Level','FontSize',12)
ylabel('Speech Score','FontSize',12)



%thdW = 1./ thdStd;
%taW = 1./ taStd;
%save('MEMRjunk','taBar','thdBar','thdW','taW','speechScore')

keyboard

figure; hold on
for ii=1:N
    plot(taBar(ii,:),thdBar(ii,:),'o','MarkerSize',10,'LineWidth',1)
    
    line([taBar(ii),taBar(ii)],[thdBar(ii)-thdStd(ii),thdBar(ii)+thdStd(ii)])
    line([taBar(ii)-taStd(ii),taBar(ii)+taStd(ii)],[thdBar(ii),thdBar(ii)])
end
ylabel('MEMR Threshold','FontSize',12)
xlabel('Total Activation','FontSize',12)



end

% OLD CODE ----------------------------------------------------------------

% fit for thd predicting speech
% Linear model Poly1:
%      f(x) = p1*x + p2
% Coefficients (with 95% confidence bounds):
%        p1 =    -0.06394  (-0.2051, 0.07721)
%        p2 =       24.42  (13.44, 35.4)
% 
% Goodness of fit:
%   SSE: 63.83
%   R-square: 0.1198
%   Adjusted R-square: 0.08831
%   RMSE: 1.51

% fit for ta predicting speech
% Linear model Poly1:
%      f(x) = p1*x + p2
% Coefficients (with 95% confidence bounds):
%        p1 =     0.02647  (-0.01535, 0.06829)
%        p2 =       17.97  (14.49, 21.45)
% 
% Goodness of fit:
%   SSE: 31.34
%   R-square: -0.009094
%   Adjusted R-square: -0.04513
%   RMSE: 1.058
% 
% Warning: A negative R-square is possible if the model does not contain a constant term and the fit is poor (worse than just fitting the mean). Try changing the model or using a different StartPoint.









%MEMR = analyzeMEMR_v5(DataL,DataR,time,fs,clickIndx);

% load('MEM20_analyzedMEMR_1.mat')
% %load('MEM01_analyzedMEMR_1.mat')
% DataL = MEMR.DataL;
% DataR = MEMR.DataR;
% fs = MEMR.fs;
% clickIndx = MEMR.clickIndx;
% time = MEMR.time;


% 
% % The arc length of a parametric curve (x(t),y(t)) over the interval (a,b)
% % can be found by integrating:
% 
% t = timeChunk;
% dt = median(gradient(t));
% x = q10;
% 
% xr = real(x);
% xi = imag(x);
% smoothing = 0.999999;
% ppr = csaps(t,xr,smoothing);
% ppi = csaps(t,xi,smoothing);
% xr_sm = ppval(ppr,t);
% xi_sm = ppval(ppi,t);
% int = cumsum(( (gradient(real(x),t))   + (gradient(imag(x),t))  )) * dt;
% int_sm = cumsum(( (gradient(xr_sm,t))   + (gradient(xi_sm,t))  )) * dt;
% 
% arclen = cumsum(sqrt((        (gradient(xr_sm,t)).^2   + (gradient(xi_sm,t)).^2        )    )) * dt;
% 
% % check for correct amount of smoothing
% % subplot(2,1,1)
% % plot(t,xr,'b')
% % hold on
% % fnplt(ppr, 'r'); 
% % subplot(2,1,2)
% % plot(t,xi,'b')
% % hold on
% % fnplt(ppi, 'r'); 
% 
% arclen = cumsum(sqrt( (gradient(real(x),t)).^2   + (gradient(imag(x),t)).^2  )) * dt;
% int = cumsum(( (gradient(real(x),t))   + (gradient(imag(x),t))  )) * dt;
% 
% plot(t,int_sm,'r')
% hold on
% 
% % compare with these:
% multiplier = -1;
% plot(t,multiplier*(abs(complex(x-1))),'b.-')
% hold on
% plot(t,(abs(complex(x)))-1,'g.-')
% 
% legend('integrate','abs-1','abs','Location','SouthEast')
% 
